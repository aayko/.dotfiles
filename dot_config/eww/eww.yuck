;; Variables
(defpoll clock_time :interval "1s" "date '+\%H󰇙\%M'")

(deflisten appname "scripts/appname")

(deflisten workspaces :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :initial "1" "scripts/get-active-workspace")

(deflisten bt_name :initial "Unknown" `tail -F /tmp/eww/bluetooth`)
(defvar bt_state false)

(deflisten wifi_name :initial "Unknown" "scripts/wifi")
(defvar wifi_state false)

(defwidget workspaces []
  (eventbox :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces}${current_workspace}" 
             :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          ;; 10th workspace needs 2 windows to be considered active because of xwaylandvideobridge 
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${(workspace.windows > 0 && workspace.id != 10) || (workspace.windows > 1 && workspace.id == 10) ? "occupied" : "empty"}"
            (label :text "${workspace.id == current_workspace ? "" : "" }")
            )
          )
        )
      )
    )
  )

(defwidget appnames []
  (eventbox
    (box
      (label
        :class "app-name"
        :limit-width "35"
        :text appname
        ))))

(defwidget bluetooth [] 
  (eventbox
    (box :class "bluetooth" 
         :space-evenly "false" 
      :style "color: ${bt_state ? '#ffffff' : '#333333'};"
      (button :class "bluetooth-icon" 
               "${bt_state ? '󰂯' : '󰂲'}")
      (label    :class "bluetooth-label"
                :text "${bt_state ? bt_name : "-" }"
        ))))

(defwidget wifi [] 
  (eventbox
    (box :class "wifi" 
         :space-evenly "false"
      :style "color: ${wifi_state ? '#ffffff' : '#333333'};"
      (button :class "wifi-icon" 
               "${wifi_state ? '󰖩' : '󰖪'}")
      (label    :class "wifi-label"
                :text "${wifi_state ? wifi_name : "-" }"
        ))))

(defwidget bat []
  (eventbox
    (box
      (label :text "${EWW_BATTERY["BAT0"].capacity}%"
             :class "battery_percentage"
        ))))

(defwidget clock_module []
  (eventbox
    (box
      (label
        :text clock_time
        :class "clock_time" )
      )))

(defwidget sep []
  (box
    (label
      :class "separator"
      :text "|"
      )))

(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :class "left_modules"
    (workspaces)))

(defwidget center []
  (box
    :space-evenly false
    :class "center_modules"
    (appnames)
    ))

(defwidget right []
  (box
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (wifi)
    (sep)
    (bluetooth)
    (sep)
    (bat)
    (sep)
    (clock_module)
    ))

(defwidget bar_layout []
  (centerbox
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))

(defwindow bar
  :monitor 0
  :exclusive false
  :geometry (geometry
  :width "100%"
  ;; height is defined by the content .... (~55px)
  :height "0px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout))
