;; Variables
(defpoll clock_time :interval "1s" "date '+\%H󰇙\%M'")
(defpoll clock_date :interval "1m" "date '+%b %d'")

(defpoll wifi_color :interval "1s" "scripts/wifi --color")
(defpoll wifi_name :interval "100ms" "scripts/wifi --name")
(defpoll wifi_icon :interval "1s" "scripts/wifi --icon")

(defpoll bt_color :interval "1s" "scripts/bluetooth --color")
(defpoll bt_name :interval "1s" "scripts/bluetooth --name")
(defpoll bt_icon :interval "1s" "scripts/bluetooth --icon")

(deflisten appname "scripts/appname")

(deflisten workspaces :interval "1ms" :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :interval "1ms" :initial "1" "scripts/get-active-workspace")

(defvar bt_reveal false)
(defvar bt_toggle false)

(defvar wifi_reveal false)
(defvar wifi_toggle false)

(defwidget workspaces []
  (eventbox :onscroll "scripts/change-active-workspace {} ${current_workspace}" 
            :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces}${current_workspace}" 
             :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          ;; first (10th rn) workspace needs 2 windows to be considered active because of xwaylandvideobridge 
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${(workspace.windows > 0 && workspace.id != 10) || (workspace.windows > 1 && workspace.id == 10) ? "occupied" : "empty"}"
            (label :text "${workspace.id == current_workspace ? "" : "" }")
            )
          )
        )
      )
    )
  )

(defwidget appnames []
  (eventbox
    (box
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (literal
      :content appname)
      )))

(defwidget bluetooth [] 
  (eventbox :onhover "eww update bt_reveal=true"
            :onhoverlost "eww update bt_reveal=false"
            :onclick "bluetoothmenu"
    (box :class "bluetooth" 
         :vexpand "false" 
         :hexpand "false" 
         :space-evenly "false" 
      (button :class "bluetooth-icon" 
              :style "color: ${bt_color};" bt_icon )
      (revealer :transition "slideright"
                :reveal "${bt_reveal && bt_toggle}"
                :duration "350ms"
        (label    :class "bluetooth-label"
                  :text bt_name
          )))))

(defwidget wifi [] 
  (eventbox :onhover "eww update wifi_reveal=true"
            :onhoverlost "eww update wifi_reveal=false"
    (box :class "wifi" 
         :vexpand "false" 
         :hexpand "false" 
         :space-evenly "false"
      (button :class "wifi-icon" 
              :style "color: ${wifi_color};" wifi_icon)
      (revealer :transition "slideright"
                :reveal "${wifi_reveal && wifi_toggle}"
                :duration "350ms"
        (label    :class "wifi-label"
                  :text wifi_name
          )))))

(defwidget bat []
  (eventbox
  (box
    :class "bat_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_BATTERY["BAT0"].capacity}
      :class "batbar"
      :thickness 3
      (button
        :class "iconbat"
        :tooltip "battery on ${EWW_BATTERY["BAT0"].capacity}%"
      "")))))

(defwidget clock_module []
  (eventbox
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
      :class "clock_time_class" )
      )))

(defwidget sep []
  (box
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    :valign "center"
    (label
      :class "separ"
      :valign "center"
      :text "|"
    )))

;;define widget groups
(defwidget icons []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "icons"
    (wifi)
    (bluetooth)
))

;;define widget groups
(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "left_modules"
    (workspaces)))

(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    (appnames)))

(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (icons)
    (sep)
    (bat)
    (sep)
    (clock_module)
  ))

(defwidget bar_layout []
  (centerbox
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
  ))

(defwindow bar
  :monitor 0
  :exclusive false
  :geometry (geometry
    :width "100%"
    :height "50px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout))
