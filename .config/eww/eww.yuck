;; includes
(include "yuck/variables.yuck")
(include "yuck/sidebar/music.yuck")
(include "yuck/sidebar/sys-tray.yuck")
(include "yuck/sidebar/sidebar.yuck")

;; Variables
(defpoll clock_time :interval "1s" "date '+\%H\%M'")
(defpoll clock_date :interval "1m" "date '+%b %d'")

(defpoll calendar_day :interval "1m" "date '+%d'")
(defpoll calendar_year :interval "2h" "date '+%Y'")

(defpoll volume_percent :interval "1s"  "amixer sget Master | grep 'Left:' | awk '{ print $5 }' | tr -d '[]%'")
(defpoll mic_percent :interval "1s" "amixer sget Capture | grep 'Front Left:' | awk '{print $5}' | tr -d '[]%'")

(defpoll brightness_percent :interval "1s" "light")

(defpoll volume_icon :interval "100ms" "scripts/volume")

(defpoll wifi_color :interval "1s" "scripts/wifi --color")
(defpoll wifi_name :interval "1s" "scripts/wifi --name")
(defpoll wifi_icon :interval "1s" "scripts/wifi --icon")

(defpoll bt_color :interval "1s" "scripts/bluetooth --color")
(defpoll bt_name :interval "1s" "scripts/bluetooth --name")
(defpoll bt_icon :interval "1s" "scripts/bluetooth --icon")

(deflisten appname "scripts/appname")

(deflisten workspaces :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :initial "1" "scripts/get-active-workspace")

(defvar vol_reveal false)

(defvar bt_reveal false)
(defvar bt_toggle false)

(defvar br_reveal false)

(defvar wifi_reveal false)
(defvar wifi_toggle false)

(defvar control_reveal false)

(defvar time_rev false)

;; widgets
(defwidget launcher []
  (box
    :class "launcher_module"
    :orientation "h"
    (button
      (image
        :class "launcher-icon"
        :path "assets/blossom.png"
      :image-width 28))
  ))

(defwidget workspaces []
  (eventbox :onscroll "scripts/change-active-workspace {} ${current_workspace}" 
            :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces}${current_workspace}" 
             :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          ;; first (10th rn) workspace needs 2 windows to be considered active because of xwaylandvideobridge 
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${(workspace.windows > 0 && workspace.id != 10) || (workspace.windows > 1 && workspace.id == 10) ? "occupied" : "empty"}"
            (label :text "${workspace.id == current_workspace ? "" : "" }")
            )
          )
        )
      )
    )
  )

(defwidget appnames []
  (eventbox
    :onhover "eww update control_reveal=true"
    :onhoverlost "eww update control_reveal=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (literal
      :content appname)
      (revealer
        :transition "slideright"
        :reveal control_reveal
        :duration "350ms"
        (box
          :vexpand "false"
          :hexpand "false"
          :orientation "h"
          :space-evenly "true"
          (button
            :class "app-button"
          :onclick "hyprctl dispatch killactive 1" ""))))))

(defwidget bright []
  (eventbox
    :onhover "eww update br_reveal=true"
    :onhoverlost "eww update br_reveal=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
     (label
        :text ""
        :class "bright_icon"
      :tooltip "brightness")
      (revealer
        :transition "slideleft"
        :reveal br_reveal
        :duration "350ms"
        (scale    :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
        :onchange "light -S {}" ))
 )))

(defwidget volume []
  (eventbox
    :onhover "eww update vol_reveal=true"
    :onhoverlost "eww update vol_reveal=false"
    (box
      :class "module-2"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (button
        :onclick "scripts/pop audio_ctl"
        :class "volume_icon"
        volume_icon)
      (revealer
        :transition "slideleft"
        :reveal vol_reveal
        :duration "350ms"
        (scale
          :class "volbar"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
          :onchange "amixer sset Master {}%" ))
      )))

(defwidget bluetooth [] 
  (eventbox :onhover "eww update bt_reveal=true"
            :onhoverlost "eww update bt_reveal=false"
            :onclick "bluetoothmenu"
    (box :class "bluetooth" 
         :vexpand "false" 
         :hexpand "false" 
         :space-evenly "false" 
      (button :class "bluetooth-icon" 
              :style "color: ${bt_color};" bt_icon )
      (revealer :transition "slideleft"
                :reveal "${bt_reveal && bt_toggle}"
                :duration "350ms"
        (label    :class "bluetooth-label"
                  :text bt_name
          )))))

;; (defwidget wifi []
;;   (eventbox
;;     :onhover "eww update wifi_rev=true"
;;     :onhoverlost "eww update wifi_rev=false"
;;     :onclick "wifimenu"
;;     (box
;;       :vexpand "false"
;;       :hexpand "false"
;;       :space-evenly "false"
;;       (button
;;        (_network :strength WLAN_ICON :offline "睊" :excellent "" :good "" :okay "" :slow ""))
;;       (revealer
;;         :transition "slideleft"
;;         :reveal wifi_rev
;;         :duration "350ms"
;;         (label
;;           :class "module_essid"
;;           :text ESSID_WLAN
;;         ))

(defwidget wifi [] 
  (eventbox :onhover "eww update wifi_reveal=true"
            :onhoverlost "eww update wifi_reveal=false"
    (box :class "wifi" 
         :vexpand "false" 
         :hexpand "false" 
         :space-evenly "false"
      (button :class "wifi-icon" 
              :style "color: ${wifi_color};" wifi_icon)
      (revealer :transition "slideright"
                :reveal "${wifi_reveal && wifi_toggle}"
                :duration "350ms"
        (label    :class "wifi-label"
                  :text wifi_name
          )))))

(defwidget _network [strength offline excellent good okay slow]
    (label 
      :class "module-wif"
      :text {strength == "" ? offline :
      strength < 26 ? slow :
        strength < 51 ? okay :
          strength < 76 ? good : excellent}))

(defwidget bat []
  (eventbox
    :onclick "scripts/pop system"
  (box
    :class "bat_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_BATTERY["BAT0"].capacity}
      :class "batbar"
      :thickness 4
      (button
        :class "iconbat"
        :tooltip "battery on ${EWW_BATTERY["BAT0"].capacity}%"
      "")))))

(defwidget mem []
  (box
    :class "mem_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_RAM.used_mem_perc}
      :class "membar"
      :thickness 4
      (button
        :onclick "scripts/pop system"
        :class "iconmem"
        :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
        :show_truncated false
        :wrap false
      ""))))

(defwidget clock_module []
  (eventbox
    :onhover "eww update time_rev=true"
    :onhoverlost "eww update time_rev=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
      :class "clock_time_class" )
      (revealer :transition "slideleft"
        :reveal time_rev
        :duration "350ms"
        (button
          :class "clock_date_class"
        :onclick "scripts/pop calendar" clock_date)))))

(defwidget sep []
  (box
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    :valign "center"
    (label
      :class "separ"
      :valign "center"
      :text "|"
    )))

(defwidget gap []
  (box
    :orientation "h"
    :hexpand "false"
    :visible "true"
  :width "150"))

;;define widget groups
(defwidget icons []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "icons"
    (bright)
    (volume)
    (wifi)
    (bluetooth)
))

;;define widget groups
(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "left_modules"
    ;; (launcher)
    ;; (sep)
    (workspaces)))

(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    (appnames)))

(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (icons)
    (sep)
    (bat)
    (mem)
    (sep)
    (clock_module)
  ))

(defwidget bar_layout []
  (centerbox
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
  ))

(defwindow bar
  :monitor 0
  :exclusive false
  :geometry (geometry
    :width "100%"
    :height "50px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout))

(defwidget audio []
  (box
    :class "audio-box"
    :orientation "v"
    :space-evenly "false"
    :vexpand "false"
    :hexpand "false"
    (box
      :halign "v"
      :space-evenly "false"
      :hexpand "false"
      :vexpand "false"
      (box
        :class "speaker_icon"
      :orientation "v")
      (box
        :orientation "v"
        :halign "center"
        :vexpand "false"
        :hexpand "false"
        (label
          :class "speaker_text"
          :text "speaker"
          :valign "center"
        :halign "left" )
        (box
          :class "speaker_bar"
          :halign "center"
          :vexpand "false"
          :hexpand "false"
          (scale
            :value volume_percent
            :orientation "h"
            :onchange "amixer sset Master {}%"
            :tooltip "volume on ${volume_percent}%"
            :max 100
          :min 0))))
    (label
      :text "-------------------------"
      :style "font-family: FiraCode Nerd Font"
      :class "audio_sep"
    :halign "center")
    (box
      :halign "v"
      :space-evenly "false"
      :hexpand "false"
      :vexpand "false"
      (box
        :class "mic_icon"
      :orientation "v")
      (box
        :orientation "v"
        :halign "center"
        :vexpand "false"
        :hexpand "false"
        (label
          :class "mic_text"
          :text "mic"
          :valign "center"
        :halign "left" )
        (box
          :class "mic_bar"
          :halign "center"
          :vexpand "false"
          :hexpand "false"
          (scale
            :value mic_percent
            :orientation "h"
            :tooltip "mic on ${mic_percent}%"
            :onchange "amixer sset Capture {}%"
            :max 100
          :min 0))))))

  (defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry
      :x "160"
      :y "7%"
      :anchor "top right"
      :width "280px"
    :height "60px")
    (audio))

;;Define System widget
(defwidget system []
  (box
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box
      :class "sys_bat_box"
      :orientation "h"
      :space-evenly "false"
      (circular-progress
        :value {EWW_BATTERY["BAT0"].capacity}
        :class "sys_bat"
        :thickness 9
        (label :text ""
          :class "sys_icon_bat"
          :limit-width 2
        :wrap false))
      (box
        :orientation "v"
        :space-evenly "false"
        :spacing 0
        :hexpand "false"
        :vexpand "false"
        (label
          :text "battery"
          :halign "start"
          :class "sys_text_bat"
          :limit-width 9
        :wrap false)
        (label
          :text "${EWW_BATTERY["BAT0"].capacity}%"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 22
        :wrap false)
        (label :text "${EWW_BATTERY["BAT0"].status}"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 22
        :wrap false)))
    (label
      :text "____________________________________"
      :style "font-family: FiraCode Nerd Font"
      :class "sys_sep"
    :halign "center")
    (box
      :class "sys_mem_box"
      :orientation "h"
      :space-evenly "false"
      :halign "start"
      (circular-progress
        :value {EWW_RAM.used_mem_perc}
        :class "sys_mem"
        :thickness 9
        (label
          :text ""
          :class "sys_icon_mem"
          :limit-width 2
          :wrap false
        :angle 0.0))
      (box
        :orientation "v"
        :space-evenly "false"
        :spacing 0
        :hexpand "false"
        :vexpand "false"
        (label
          :text "memory"
          :halign "start"
          :class "sys_text_mem"
          :limit-width 9
        :wrap false)
        (label
          :text "${round((EWW_RAM.used_mem/(1024*1024*1024)), 2)} | ${round((EWW_RAM.total_mem/(1024*1024*1024)), 2)}gb"
          :halign "start"
          :class "sys_text_mem_sub"
          :limit-width 22
        :wrap false)
        (label :text "${round((EWW_RAM.available_mem/(1024*1024*1024)), 2)}gb free"
          :halign "start"
          :class "sys_text_mem_sub"
          :limit-width 22
        :wrap false)
      ))))

(defwindow system
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry
  (geometry
    :x "20"
    :y "65px"
    :anchor "top right"
    :width "290px"
  :height "120px")
  (system))

;;Calendar Widget
(defwidget cal []
  (box
    :class "cal"
    :orientation "v"
    (box
      :class "cal-in"
      (calendar
        :day calendar_day
      :year calendar_year))))

(defwindow calendar
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry (geometry
    :x "20"
    :y "65px"
    :anchor "top right"
    :width "270px"
  :height "60px")
  (cal))
